package gppatientlist;

import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author x20324573
 */
public class GPPatientListGUI extends javax.swing.JFrame {

    /**
     * Creates new form GPPatientListGUI
     */
    int priorityGroupNumber;    //for display priority queue
    private PQMethods myPQueue; //priority queue method
    Stack SL;                   //Stack method
    boolean medicalCondition;   //for radiobuttongrp
    public GPPatientListGUI() { //constructor
        priorityGroupNumber = 1;
        myPQueue = new MyPriorityQueue();
        initComponents();
        SL = new Stack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        medicalConBG = new javax.swing.ButtonGroup();
        nameLBL = new javax.swing.JLabel();
        ageLBL = new javax.swing.JLabel();
        nameTF = new javax.swing.JTextField();
        ageTF = new javax.swing.JTextField();
        addBTN = new javax.swing.JButton();
        displayBTN = new javax.swing.JButton();
        displayAmountBTN = new javax.swing.JButton();
        PsortBTN = new javax.swing.JButton();
        pListBTN = new javax.swing.JButton();
        GPPatientListLBL = new javax.swing.JLabel();
        mcRBY = new javax.swing.JRadioButton();
        mcRBN = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();
        MedicalLBL1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nameLBL.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        nameLBL.setText("Name:");

        ageLBL.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        ageLBL.setText("Age:");

        nameTF.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        ageTF.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N

        addBTN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        addBTN.setText("Add Patient");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        displayBTN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        displayBTN.setText("Display");
        displayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBTNActionPerformed(evt);
            }
        });

        displayAmountBTN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        displayAmountBTN.setText("Display Amount");
        displayAmountBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayAmountBTNActionPerformed(evt);
            }
        });

        PsortBTN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        PsortBTN.setText("Priority Sort");
        PsortBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PsortBTNActionPerformed(evt);
            }
        });

        pListBTN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        pListBTN.setText("Show Priority List");
        pListBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pListBTNActionPerformed(evt);
            }
        });

        GPPatientListLBL.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        GPPatientListLBL.setText("GP Patient List");

        medicalConBG.add(mcRBY);
        mcRBY.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mcRBY.setText("Yes");
        mcRBY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcRBYActionPerformed(evt);
            }
        });

        medicalConBG.add(mcRBN);
        mcRBN.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        mcRBN.setSelected(true);
        mcRBN.setText("No");
        mcRBN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mcRBNActionPerformed(evt);
            }
        });

        jTextArea.setColumns(20);
        jTextArea.setRows(5);
        jScrollPane1.setViewportView(jTextArea);

        MedicalLBL1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        MedicalLBL1.setText("Medical Condition:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(122, 122, 122)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ageLBL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ageTF, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(mcRBY)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(mcRBN))))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pListBTN)
                    .addComponent(PsortBTN)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayBTN))
                    .addComponent(displayAmountBTN))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GPPatientListLBL)
                .addGap(267, 267, 267))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(43, 43, 43)
                    .addComponent(MedicalLBL1)
                    .addContainerGap(542, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GPPatientListLBL)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addBTN)
                            .addComponent(displayBTN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(displayAmountBTN)
                        .addGap(33, 33, 33)
                        .addComponent(PsortBTN)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pListBTN))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLBL)
                            .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageLBL)
                            .addComponent(ageTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mcRBY)
                            .addComponent(mcRBN))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(156, 156, 156)
                    .addComponent(MedicalLBL1)
                    .addContainerGap(376, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // TODO add your handling code here:
        String name, age;
        
        Patient p = new Patient();
        name = nameTF.getText();    //make new object and grab details
        age = ageTF.getText();
        
        if(!(name.equals(""))||!(age.equals(""))){  //check if nothing is in the text fields
            
        
        p.setName(name);
        p.setAge(age);
        p.setMedicalCondition(medicalCondition);

        jTextArea.append("Patient "+name+" has been added\n");
        
        SL.push(p); //push into stack
        nameTF.setText(""); //set text fields to default values
        ageTF.setText("");
        }
        else{
            JOptionPane.showMessageDialog(null,"You have not entered any details!");    //error message for no details
        }

    }//GEN-LAST:event_addBTNActionPerformed

    private void displayBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBTNActionPerformed
        // TODO add your handling code here:
        if(!(SL.isEmpty()==true)){  //check if stack has items inside
        jTextArea.append("The following patients are currently added to the list...\n\n");
        jTextArea.append(SL.displayStack()+"\n");   //display stack
        }
        else{
        JOptionPane.showMessageDialog(null,"There is nothing in the list!");    //error message for no items in stack

        }
    }//GEN-LAST:event_displayBTNActionPerformed

    private void displayAmountBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayAmountBTNActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null,"There are a total of "+SL.size()+" patients registered for the vaccine.");  //displays amount, even 0 for no patients
    }//GEN-LAST:event_displayAmountBTNActionPerformed

    private void PsortBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PsortBTNActionPerformed
        // TODO add your handling code here:
        String name;
        int priority, age, size;
        size = SL.size();   //grab size
        Patient p;
        
        for(int i=0;i<size;i++){
            p = (Patient)SL.pop();  //Grab topmost value from the stack
            name = p.getName();
            age = Integer.parseInt(p.getAge()); //parse string into int
            medicalCondition = p.getMedicalCondition();
            
            if(age>=90){
                priority = 10;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=80&&age<=89){
                priority = 9;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=70&&age<=79){
                priority = 8;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=65&&age<=69){
                priority = 7;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=18&&age<=64&&medicalCondition==true){
                priority = 6;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=55&&age<=64){
                priority = 5;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=45&&age<=54){
                priority = 4;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=30&&age<=44){
                priority = 3;
                myPQueue.enqueue(priority, p);
            }
            else if(age>=18&&age<=29){
                priority = 2;
                myPQueue.enqueue(priority, p);
            }
            else if(age>0&&age<18){
                priority = 1;
                myPQueue.enqueue(priority, p);
            }
            else{
                JOptionPane.showMessageDialog(null, "Error in sorting the list! Last tried to sort "+name+" who is "+age+" years old\n");   //Hypothetical error message if value is not realistic
                break;
            }
            
            jTextArea.append("Patients have been given priorities and have been sorted");
            //jTextArea.append(myPQueue.printPQueue()+"\n"); //display value after sorting
            
        }
        
        
        
    }//GEN-LAST:event_PsortBTNActionPerformed

    private void pListBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pListBTNActionPerformed
        // TODO add your handling code here:
        if(myPQueue.size()>0){      //check if anything is in the sorted list
            PQElement pqelement = (PQElement)myPQueue.dequeue();    //take first element
            Patient patientList = (Patient)pqelement.getElement();  //get patients details via patient
            int priorityKey = pqelement.getKey();                   //get key
            
            jTextArea.append("Group: "+priorityGroupNumber+" Priority: "+pqelement.getKey()+" Name: "+patientList.getName()+" Age: "+patientList.getAge()+" Medical Condition?: "+patientList.getMedicalCondition()+"\n");
            
            int size = myPQueue.size();
            for(int i=0;i<size;i++){
                PQElement nextElement = (PQElement)myPQueue.getNext();  //grab next element
                Patient pNext = (Patient)nextElement.getElement();      //
                
                if(nextElement.getKey()==priorityKey){  //check if value taken matches key
                    jTextArea.append("Group: "+priorityGroupNumber+" Priority: "+nextElement.getKey()+" "+nextElement.printPatientDetails()+"\n");  //print details
                    myPQueue.dequeue(); //remove from queue
                }
                else{
                    priorityGroupNumber = priorityGroupNumber + 1;  //increase by 1
                    break;  //to prevent group number from unrealistically increasing
                }
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "There is no sorted patients to show!");    //error message if nothing is in queue
        }
    }//GEN-LAST:event_pListBTNActionPerformed

    private void mcRBYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcRBYActionPerformed
        // TODO add your handling code here:
        medicalCondition = true;    //if yes radio button selected, change to true
    }//GEN-LAST:event_mcRBYActionPerformed

    private void mcRBNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mcRBNActionPerformed

        medicalCondition = false;   //if no radio button selected, change to false
    }//GEN-LAST:event_mcRBNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GPPatientListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GPPatientListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GPPatientListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GPPatientListGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GPPatientListGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel GPPatientListLBL;
    private javax.swing.JLabel MedicalLBL1;
    private javax.swing.JButton PsortBTN;
    private javax.swing.JButton addBTN;
    private javax.swing.JLabel ageLBL;
    private javax.swing.JTextField ageTF;
    private javax.swing.JButton displayAmountBTN;
    private javax.swing.JButton displayBTN;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private javax.swing.JRadioButton mcRBN;
    private javax.swing.JRadioButton mcRBY;
    private javax.swing.ButtonGroup medicalConBG;
    private javax.swing.JLabel nameLBL;
    private javax.swing.JTextField nameTF;
    private javax.swing.JButton pListBTN;
    // End of variables declaration//GEN-END:variables
}
